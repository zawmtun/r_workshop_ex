---
title: "Data Wrangling"
format: html
editor: visual
---

## Data Wrangling

## Learning objective

In this session, you will be able to understand:

1.  How to read a CSV file
2.  The concept of tidy data
3.  How to select columns and filter rows in a dataframe
4.  How to use pipe
5.  How to create new columns in a dataframe
6.  How to aggregate data to summary statistics

*Load package*

```{r}
library(tidyverse)
```

*Read data*

```{r}
surveys <- read_csv("data/dhs_myanmar_tetanus.csv")
```

`read_csv()` read in CSV file as a `data.frame`, a special data structure in R. `data.frame` is constructed by vectors: Each column is a vector and each vector has the same length.

Let's print `surveys` directly in the console.

```{r}
surveys
```

The output shows that it is a `tibble`, a dataframe variant and the first 10 rows of the data with as many columns as the console screen can fit.

We can have an overview of the data using `str()`.

```{r}
str(surveys)
```

The output shows that there are 3867 rows and 15 columns. The column names are listed following `$`. It also shows data type and first few values of each column.

We can also `View()` the dataframe like a spreadsheet. To do that, first put the cursor on the name of the dataframe and then press **F2**. Alternatively, you can type the following to the console:

```{r}
View(surveys)
```

## Tidy data

Tidy data is a specific data structure mapping to its meaning. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. In **tidy data**:

1.  Every column is a variable.

2.  Every row is an observation.

3.  Every cell is a single value.

## `dplyr` functions

`dplyr` package consists of the following basic verbs in managing a dataframe.

-   `select()`: Select columns
-   `filter()`: Select rows based on conditions
-   `mutate()`: Create new columns
-   `group_by()` and `summarize()`: Create summary statistics on grouped data
-   `arrange()`: Sort results
-   `count()`: Count discrete values

## Select columns

We can keep columns of a dataframe by name. The code below keep `age`, `education`, `ancplace` from `surveys` dataset.

```{r}
select(surveys, age, education, ancplace)
```

We can also select columns by sequence number (index) of columns. Let's say we would like to keep first, third, and fifth columns.

```{r}
select(surveys, 1, 3, 5)
```

There are a few helper functions that allows us to select columns more efficiently. These include:

-   `starts_with()` : Starts with an exact prefix.
-   `ends_with()` : Ends with an exact suffix.
-   `contains()` : Contains a literal string.
-   `matches()` : Matches a regular expression.
-   `num_range()` : Matches a numerical range like x01, x02, x03.

For example, we can select columns that starts with `get_help`.

```{r}
select(surveys, starts_with("get_help"))
```

What if we want to select columns that contains `health` in their names.

```{r}
select(surveys, contains("health"))
```

We can combine the helper functions with other selection methods. Here, we select `caseid`, `age`, and columns that starts with `get_help`.

```{r}
select(surveys, caseid, age, starts_with("get_help"))
```

Remove columns `record_id` and `species_id` from `surveys` dataset.

```{r}
select(surveys, -age, -education, -ancplace)
```

### Practice

Select all columns that does not start with `get_help`.

```{r}
select(surveys, -starts_with("get_help"))
```

## Filter rows

`filter()` should be used together with logical operators that compares one or two columns.

|             |                             |
|-------------|-----------------------------|
| `x < y`     | x is smaller than y         |
| `x > y`     | x is greater than y         |
| `x <= y`    | x is smaller and equal to y |
| `x >= y`    | x is greater and equal to y |
| `x == y`    | x is equal to y             |
| `x != y`    | x is not equal to y         |
| `x %in% y`  | x is in the list of y       |
| `!x %in% y` | x is not in the list of y   |

: Table 1. Logical operators

Here are a few examples:

This code selects rows of mothers younger than 17.

```{r}
filter(surveys, age < 17)
```

This code selects rows of mothers residing in rural areas.

```{r}
filter(surveys, residence == "Rural")
```

This code selects rows of mothers who completed primary school.

```{r}
filter(surveys, education == "Primary")
```

We can also combine two or more logical comparisons using `&` (AND) and `|` (OR). For example, the code below selects rows of mothers younger than 17 residing in rural areas.

![](images/Picture%201.png){width="270"}

```{r}
filter(surveys, age < 17 & residence == "Rural")
```

The code below select rows within age range of 18 and 22.

```{r}
filter(surveys, age >= 18 & age <= 22)
```

The code below select rows with mothers younger than 17 or older than 45.

```{r}
filter(surveys, age < 17 | age > 45)
```

### Practice

Select rows with mothers residing in rural areas with highest education of primary school who gave birth at a public health facility.

```{r}
filter(surveys, education == "Primary" & residence == "Rural" & ancplace == "Public health facilities")
```

## Pipes

Consider the following commands. We first select rows and feed the resulting dataframe to the following line to select columns.

```{r}
surveys2 <- filter(surveys, age < 17)
surveys_demo <- select(surveys2, age, residence, employ)
surveys_demo
```

Another option of doing the same thing is to nest these two functions together.

```{r}
surveys_demo <- select(filter(surveys, age < 17), age, residence, employ)
```

We can also use pipe `|>`.

```{r}
surveys_demo <- surveys |> # and then; it plugs the output to the first position of the following row.
  filter(age < 17) |> 
  select(age, residence, employ)

surveys_demo
```

For completeness, here is another commonly used pipe `%>%`.

```{r}
surveys %>%
  filter(age < 17) %>%
  select(age, residence, employ)
```

### Practice

Using pipes, select the `surveys` data to include mothers gave birth to their last child at home and retain only columns `age`, `ancplace`, and `tetanus_vacc`

```{r}
surveys |> 
  filter(ancplace == "Home") |> 
  select(age, ancplace, tetanus_vacc)
```

## Create new columns

Let's create a new column that has double the age of mothers. Then, select the original and the newly created column.

```{r}
surveys |> 
  mutate(age2 = age * 2) |> 
  select(age, age2)
```

Next, let's create a new column of age group including the following categories: 15-24, 25-29, 30-34, 34-49.

To do that, we use `case_when()` in which each age group and the corresponding logical statement are linked using a `~`. `.default = "Unknown"` will label the rows that do not match any of the above conditions as Unknown.

```{r}
dat <- surveys |> 
  mutate(
    agegrp = case_when(
      age >= 15 & age <= 24 ~ "15-24",
      age >= 25 & age <= 29 ~ "25-29",
      age >= 30 & age <= 34 ~ "30-34",
      age >= 35 & age <= 49 ~ "34-49",
      .default = "Unknown"
    )
  )
```

Let's check if the grouping is done correctly.

```{r}
dat |> 
  select(age, agegrp) |> 
  table()
```

### Practice

Create a new dataframe from the surveys with a new column that lumps the birth order of last child of 4 and above into a single group. Name the new column as `birth_order_last_child_grp`.

Hint: Think carefully about what to use as default.

```{r}
dat <- dat |> 
  mutate(
    birth_order_last_child = case_when(
      birth_order_last_child >= 4 ~ "4 and above",
      .default = as.character(birth_order_last_child)
    )
  )

dat |> 
  select(birth_order_last_child) |> 
  table()
```

## Aggregate

We often want to summarise data by aggregating the data. Here, we calculate the average age by `residence`.

```{r}
surveys |> 
  group_by(residence) |> 
  summarize(mean_age = mean(age))
```

Now, let's get average age by `residence` and `education`.

```{r}
surveys |> 
  group_by(residence, education) |> 
  summarize(mean_age = mean(age))
```

We can also aggregate using multiple summary measures in one `summarise()` call. Now, let's get average and minimum age by `residence` and `education`.

```{r}
surveys |>
  group_by(residence, education) |>
  summarize(mean_age = mean(age),
            min_age = min(age))
```

Sort the results by `min_age`.

```{r}
surveys |>
  group_by(residence, education) |>
  summarize(mean_age = mean(age),
            min_age = min(age)) |>
  ungroup() |> 
  arrange(min_age)
```

Sort the results by `min_age` in descending order.

```{r}
surveys |>
  group_by(residence, education) |>
  summarize(mean_age = mean(age),
            min_age = min(age)) |>
  ungroup() |> 
  arrange(-min_age)
```

### Practice

Find out average, minimum, and maximum of number of children (last birth order) by education. Sort the data by average number of children in descending order.

```{r}
surveys |>
  group_by(education) |>
  summarize(mean_child = mean(birth_order_last_child),
            min_child = min(birth_order_last_child),
            max_child = max(birth_order_last_child)) |>
  ungroup() |> 
  arrange(-mean_child)
```

## Aggregate - count the number of rows

We can use `count()` to count the number of rows based on one or more variables.

Here, we count the number of mothers by `employ`.

```{r}
surveys |>
  count(employ)
```

`count()` is a shorthand for `group_by()` and `summarise()`, using `n()`. (See `?n` for more details)

```{r}
surveys |>
  group_by(employ) |>
  summarise(count = n())
```

We can sort the count in descending order by changing `sort` argument to `TRUE` (default is `FALSE`).

```{r}
surveys |>
  count(employ, sort = TRUE)
```

We can count by more than one variable. Here we count by `residence` and `employ`.

```{r}
surveys |>
  count(residence, employ)
```

### *Practice*

1.  Enumerate eligible mothers surveyed by their education attainment?

```{r}
surveys |> count(education)
```

2.  Count the mothers surveys by `state_region` and their `wealth` quantile?

```{r}
surveys |> count(state_region, wealth)
```

3.  What was the oldest `age` of mothers in each type of health facility where they gave birth (`ancplace`)? Sort the maximum age in descending order.

```{r}
dat <- surveys |> 
  group_by(ancplace) |> 
  summarise(age_max = max(age)) |> 
  ungroup() |> 
  arrange(-age_max)
```
